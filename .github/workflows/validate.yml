name: üì± Phone Apps Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  validate-phone-apps:
    name: üîç Validate Phone Apps
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: üìã Install Dependencies
        run: |
          # Install shellcheck for shell script validation
          sudo apt-get update
          sudo apt-get install -y shellcheck

          # Install jq for JSON processing
          sudo apt-get install -y jq

          # Install lua for syntax checking
          sudo apt-get install -y lua5.4
          # Try to install luac5.4, fallback if not available
          sudo apt-get install -y luac5.4 || echo "luac5.4 not available, will use alternative"

      - name: üîç Run Phone Apps Validation
        run: |
          chmod +x validate_phone_apps.sh
          ./validate_phone_apps.sh

      - name: üß™ Lua Syntax Check
        run: |
          echo "üîç Checking Lua syntax..."

          # Check which Lua compiler is available
          if command -v luac5.4 >/dev/null 2>&1; then
            LUA_COMPILER="luac5.4"
          elif command -v luac >/dev/null 2>&1; then
            LUA_COMPILER="luac"
          else
            echo "‚ö†Ô∏è  No Lua compiler found, skipping syntax check"
            exit 0
          fi

          echo "Using compiler: $LUA_COMPILER"

          # Create temporary error log
          error_log=$(mktemp)

          find . -name "*.lua" -type f -print0 | while IFS= read -r -d '' file; do
            echo "Checking: $file"
            # Use luac for basic syntax checking (ignores undefined globals)
            if ! $LUA_COMPILER -p "$file" >/dev/null 2>&1; then
              echo "‚ùå Syntax error in: $file"
              echo "Error in $file:" >> "$error_log"
              $LUA_COMPILER -p "$file" 2>&1 | head -3 >> "$error_log"
              echo "" >> "$error_log"
            fi
          done

          # Check if any errors were found
          if [ -s "$error_log" ]; then
            echo "‚ùå Lua syntax errors found:"
            cat "$error_log"
            rm "$error_log"
            exit 1
          fi

          rm "$error_log"
          echo "‚úÖ All Lua files have valid syntax"

      - name: üìù JavaScript/HTML Validation
        run: |
          echo "üîç Checking JavaScript syntax..."
          find . -name "*.js" -type f | while read -r file; do
            echo "Checking: $file"
            if ! node -c "$file" 2>/dev/null; then
              echo "‚ùå Syntax error in: $file"
              exit 1
            fi
          done
          echo "‚úÖ All JavaScript files have valid syntax"

          echo "üîç Checking HTML structure..."
          find . -name "*.html" -type f | while read -r file; do
            echo "Checking: $file"
            # Basic HTML structure check
            if ! grep -q "<!DOCTYPE html>" "$file"; then
              echo "‚ö†Ô∏è  Missing DOCTYPE in: $file"
            fi
            if ! grep -q "<html" "$file"; then
              echo "‚ùå Missing html tag in: $file"
              exit 1
            fi
          done
          echo "‚úÖ All HTML files have basic structure"

      - name: üìã Manifest Validation
        run: |
          echo "üîç Validating fxmanifest.lua files..."
          find . -name "fxmanifest.lua" -type f | while read -r file; do
            echo "Checking: $file"
            
            # Check required fields
            if ! grep -q "fx_version" "$file"; then
              echo "‚ùå Missing fx_version in: $file"
              exit 1
            fi
            
            if ! grep -q "game.*gta5" "$file"; then
              echo "‚ùå Missing or incorrect game field in: $file"
              exit 1
            fi
            
            if ! grep -q "lua54.*yes" "$file"; then
              echo "‚ö†Ô∏è  lua54 not set to 'yes' in: $file"
            fi
          done
          echo "‚úÖ All manifests validated"

      - name: üóÑÔ∏è Database Schema Validation
        run: |
          echo "üîç Validating SQL files..."
          find . -name "*.sql" -type f | while read -r file; do
            echo "Checking: $file"
            
            # Check for CREATE TABLE statements
            if ! grep -q "CREATE TABLE" "$file"; then
              echo "‚ùå No CREATE TABLE found in: $file"
              exit 1
            fi
            
            # Check for IF NOT EXISTS
            if ! grep -q "IF NOT EXISTS" "$file"; then
              echo "‚ö†Ô∏è  Missing IF NOT EXISTS in: $file"
            fi
            
            # Basic SQL syntax check
            if grep -q "CREAT TABLE\|CRATE TABLE\|CREATE TABEL" "$file"; then
              echo "‚ùå SQL syntax error in: $file"
              exit 1
            fi
          done
          echo "‚úÖ All SQL files validated"

      - name: üîß Configuration Validation
        run: |
          echo "üîç Validating config.lua files..."
          find . -name "config.lua" -type f | while read -r file; do
            echo "Checking: $file"
            
            # Check for required Config table
            if ! grep -q "Config.*=" "$file"; then
              echo "‚ùå Missing Config table in: $file"
              exit 1
            fi
            
            # Check for PhoneApp configuration
            if ! grep -q "PhoneApp.*=" "$file"; then
              echo "‚ùå Missing PhoneApp configuration in: $file"
              exit 1
            fi
            
            # Check for app identifier
            if ! grep -q "identifier.*=" "$file"; then
              echo "‚ùå Missing app identifier in: $file"
              exit 1
            fi
          done
          echo "‚úÖ All config files validated"

      - name: üîó Framework Integration Check
        run: |
          echo "üîç Checking framework integration..."

          # Check if shared framework exists
          if [ ! -f "shared/phone_framework.lua" ]; then
            echo "‚ùå Universal phone framework missing"
            exit 1
          fi

          # Check for framework support in shared file
          for framework in "es_extended" "qb-core" "qbx_core"; do
            if ! grep -q "$framework" "shared/phone_framework.lua"; then
              echo "‚ö†Ô∏è  Framework support missing: $framework"
            fi
          done

          # Check for phone system support
          for phone in "lb-phone" "qb-phone" "qs-smartphone"; do
            if ! grep -q "$phone" "shared/phone_framework.lua"; then
              echo "‚ö†Ô∏è  Phone system support missing: $phone"
            fi
          done

          echo "‚úÖ Framework integration validated"

      - name: üì± App Structure Validation
        run: |
          echo "üîç Validating app structure..."

          apps=("invoicing" "notes" "business_cards" "calculator" "gallery")

          for app in "${apps[@]}"; do
            echo "Checking app: $app"
            
            # Check required directories
            if [ ! -d "$app" ]; then
              echo "‚ùå App directory missing: $app"
              exit 1
            fi
            
            if [ ! -d "$app/client" ]; then
              echo "‚ùå Client directory missing: $app"
              exit 1
            fi
            
            # Check required files
            if [ ! -f "$app/fxmanifest.lua" ]; then
              echo "‚ùå Manifest missing: $app"
              exit 1
            fi
            
            if [ ! -f "$app/config.lua" ]; then
              echo "‚ùå Config missing: $app"
              exit 1
            fi
            
            if [ ! -f "$app/client/client.lua" ]; then
              echo "‚ùå Client script missing: $app"
              exit 1
            fi
            
            # Check for phone framework usage in client
            if ! grep -q "phone_framework" "$app/client/client.lua"; then
              echo "‚ùå Client not using phone framework: $app"
              exit 1
            fi
          done

          echo "‚úÖ All app structures validated"

      - name: üõ°Ô∏è Security Check
        run: |
          echo "üîç Running security checks..."

          # Check for potential security issues
          if grep -r "eval\|exec\|system" --include="*.lua" --include="*.js" .; then
            echo "‚ö†Ô∏è  Potential security issue found - review eval/exec/system usage"
          fi

          # Check for hardcoded credentials
          if grep -ri "password\|secret\|token.*=" --include="*.lua" --include="*.js" .; then
            echo "‚ö†Ô∏è  Potential credentials found - review sensitive data"
          fi

          # Check for SQL injection patterns
          if grep -r "mysql.*query.*%.*%" --include="*.lua" .; then
            echo "‚ö†Ô∏è  Potential SQL injection pattern found"
          fi

          echo "‚úÖ Security check completed"

      - name: üìä Generate Validation Report
        if: always()
        run: |
          echo "# üì± Phone Apps Validation Report" > validation-report.md
          echo "Generated on: $(date)" >> validation-report.md
          echo "" >> validation-report.md

          echo "## üìã Validation Summary" >> validation-report.md
          echo "- ‚úÖ Lua syntax validation" >> validation-report.md
          echo "- ‚úÖ JavaScript/HTML validation" >> validation-report.md
          echo "- ‚úÖ Manifest validation" >> validation-report.md
          echo "- ‚úÖ Database schema validation" >> validation-report.md
          echo "- ‚úÖ Configuration validation" >> validation-report.md
          echo "- ‚úÖ Framework integration check" >> validation-report.md
          echo "- ‚úÖ App structure validation" >> validation-report.md
          echo "- ‚úÖ Security check" >> validation-report.md
          echo "" >> validation-report.md

          echo "## üì± Apps Validated" >> validation-report.md
          for app in invoicing notes business_cards calculator gallery; do
            if [ -d "$app" ]; then
              echo "- ‚úÖ $app" >> validation-report.md
            else
              echo "- ‚ùå $app (missing)" >> validation-report.md
            fi
          done

          echo "" >> validation-report.md
          echo "## üîß Framework Support" >> validation-report.md
          echo "- ‚úÖ ESX (es_extended)" >> validation-report.md
          echo "- ‚úÖ QBCore (qb-core)" >> validation-report.md
          echo "- ‚úÖ QBX (qbx_core)" >> validation-report.md
          echo "" >> validation-report.md
          echo "## üì± Phone System Support" >> validation-report.md
          echo "- ‚úÖ LB Phone (lb-phone)" >> validation-report.md
          echo "- ‚úÖ QB Phone (qb-phone)" >> validation-report.md
          echo "- ‚úÖ QS Smartphone (qs-smartphone)" >> validation-report.md

          cat validation-report.md

      - name: üì§ Upload Validation Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-report
          path: validation-report.md
          retention-days: 30
